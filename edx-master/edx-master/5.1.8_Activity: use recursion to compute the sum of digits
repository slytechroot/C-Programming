Activity: use recursion to compute the sum of digits

Please write a C-program that uses a recursive function called "sumOfDigits()" to compute the sum of the digits of a number. To do so, your main function should first read an integer number as input and then call sumOfDigits(), which should in turn call itself until there are no digits left to sum, at which point the final sum should display to the user.

Here is the main idea of how the recursion in sumOfDigits() should work:

sumOfDigits(6452) = 2 + sumOfDigits(645)

sumOfDigits(645) = 5 + sumOfDigits(64)

...

sumOfDigits(6) = 6
Examples
Input

47253

Output

21

 
Input

643

Output

13

#####

Hint 1 :

To isolate the value of each digit, sumOfDigits() can utilize the modulus operator (%)

Hint 2 :

sumOfDigits() should check whether it is examining the last digit by determining if the value of the number passed in is less than 10.



############## Still needs work!!!

#include <stdio.h>

// Recursive function to compute the sum of digits
int sumOfDigits(int num) {
    if (num == 0) {
        return 0; // Base case: when num is 0, return 0
    }
    return (num % 10) + sumOfDigits(num / 10);
}

int main() {
    int number;

    // Read an integer from the user
    printf("Enter an integer: ");
    scanf("%d", &number);

    // Ensure positive input
    if (number < 0) {
        number =- number; // Convert negative number to positive
    }

    // Compute and display the sum of digits
    printf("\nSum of digits: %d\n", sumOfDigits(number));

    return 0;
}


















